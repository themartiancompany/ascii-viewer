#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  view_date=""
  view_duration=""
  in_files=()
  color=""
  quiet=""
}

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  _check_cmd \
    'cat' \
    'coreutils'
  if [[ "${_os}" == "Android" ]]; then
    _check_cmd \
      'sdotool'
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    _check_cmd \
      'setfont' \
      'kbd'
    _check_cmd \
      'showconsolefont' \
      'kbd'
  fi
}

_get_share() {
  echo \
    "$(_get_usr)/share"
}

_font_picture() {
  local \
    _font \
    _fonts
  _fonts="$( \
    _get_share)/kbd/consolefonts"
  _font="drdos"
  _font_path="${_fonts}/${_font}${_height}x${_height}.psfu.gz"
  echo \
    "${_font_path}"
}

_font_human() {
  local \
    _height=22 \
    _font \
    _fonts \
  _share="$( \
    _get_usr)/share"
  _fonts="$( \
    _get_share)/kbd/consolefonts"
  _font="${_fonts}/iso02-12x${_height}.psfu.gz"
  echo \
    "${_font}"
}

_view_human() {
  local \
    _height=22 \
    _setfont \
    _setfont_opts=()
  _setfont_opts+=(
    -h"${_height}"
  )
  _setfont="$( \
    command \
      -v \
      "setfont")"
  "${_setfont}" \
    "${_setfont_opts[@]}" \
    "$(_font_human)"
}

_encode() {
  local \
    _in="${1}" \
    _out="${2}" \
    _cacawrite_opts=()
  if [[ "${quiet}" == "n" ]]; then
    _cacawrite_opts+=(
      -v
    )
  fi
  cacawrite \
    "${_cacawrite_opts[@]}" \
    "${_in}" \
    "${_out}"
}

_view_picture() {
  local \
    _height=8 \
    _setfont \
    _setfont_opts=()
  _setfont_opts+=(
    -h"${_height}"
  )
  _setfont="$( \
    command \
      -v \
      "setfont")"
  "${_setfont}" \
    "${_setfont_opts[@]}" \
    "$(_font_picture)"
}

_ascii_viewer() {
  local \
    _view_duration="${1}" \
    _in=() \
    _os \
    _out \
    _work_dir \
    _img2txt_opts=()
  shift \
    1
  _work_dir="${HOME}/.cache/$( \
    _get \
      "app" \
      "name")"
  mkdir \
    -p \
    "${_work_dir}"
  _out="${_work_dir}/ascii.txt"
  _in+=(
    "$@"
  )
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "GNU/Linux" ]]; then
    _view_picture
  fi
  _img2txt_opts+=(
    -W 90
    -H 90
  )
  img2txt \
    "${_img2txt_opts[@]}" \
    "${_in}"
  sleep \
    10
  if [[ "${_os}" == "GNU/Linux" ]]; then
    _view_human
  fi
}

_set_overrides() {
  _set_override \
    "view" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "view" \
    "duration" \
    "15"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Cross-platform ASCII picture viewer.

Usage:
  $(_get "app" "name")
    [options]
    [in_file]
  options:
     -L <view_duration>   For how much time keep the
                          picture open.
                          Default: '$(_get 'view' 'duration')'
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                View date:   $(_get "view" "date")"
  _msg_info "            View duration:   $(_get "view" "duration")"
  _msg_info "                 In files:   ${in_files[*]}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'L:i:p:cvh?' \
    arg; do
  case \
    "${arg}" in
    L) override_view_duration="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
in_files+=(
  "$@"
)
if [[ "${in_files[*]}" ==  "" ]]; then
  _msg_error \
    "no files given" \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
       "view" \
       "duration")"
  "${in_files[@]}"
)
_ascii_viewer \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
